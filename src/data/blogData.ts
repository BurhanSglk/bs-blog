export const blogData = [
  {
    id:1,
    slug: 'react-performans',
    title: 'React ile Performans Optimizasyonu',
    author: 'Burhan SaÄŸlÄ±k',
    date: '14 Nisan 2025',
    coverImage: '../images/optimization.jpg', // GÃ¶rseli gÃ¼ncellediÄŸimizden emin ol
    content: `
### ğŸš€ GiriÅŸ

React uygulamalarÄ±nda **performans**, kullanÄ±cÄ± deneyimi aÃ§Ä±sÄ±ndan kritik bir rol oynar. **Daha hÄ±zlÄ±**, **daha verimli** ve **daha optimize edilmiÅŸ** React uygulamalarÄ± oluÅŸturmak, hem kullanÄ±cÄ± memnuniyetini artÄ±rmak hem de SEO aÃ§Ä±sÄ±ndan bÃ¼yÃ¼k Ã¶nem taÅŸÄ±r.

Bu yazÄ±da, React projelerinizde performansÄ± nasÄ±l optimize edebileceÄŸinizi, hangi tekniklerin iÅŸinize yarayacaÄŸÄ±nÄ± ve kullanabileceÄŸiniz araÃ§larÄ± keÅŸfedeceÄŸiz.

---

### ğŸ“Œ Temel Performans Ä°yileÅŸtirme Teknikleri

#### 1. Memoization (Yinelemeli Hesaplama Engelleme)

React, bileÅŸenlerini her render ettiÄŸinde tÃ¼m alt bileÅŸenlerini de yeniden render eder. Ancak bazÄ± bileÅŸenlerin sadece veri deÄŸiÅŸtiÄŸinde yeniden render edilmesi gerekir. Bu durumda **memoization** (yinelemeli hesaplama engelleme) yardÄ±mcÄ± olabilir. Ã–rneÄŸin, "React.memo" kullanarak:

\`\`\`tsx
const MemoizedComponent = React.memo(MyComponent)
\`\`\`

Memoization sayesinde yalnÄ±zca verilerin deÄŸiÅŸtiÄŸi bileÅŸenler render edilir, bÃ¶ylece gereksiz render iÅŸlemleri engellenir.

#### 2. useCallback ve useMemo

"useCallback" ve "useMemo" hook'larÄ±, fonksiyon referanslarÄ±nÄ±n ve hesaplanan deÄŸerlerin yeniden hesaplanmasÄ±nÄ± engellemek iÃ§in kullanÄ±lÄ±r. Ã–zellikle yÃ¼ksek performans gerektiren iÅŸlemler iÃ§in idealdir.

\`\`\`tsx
const memoizedCallback = useCallback(() => {
  console.log('Function Called');
}, [dependencyArray]);
\`\`\`

\`\`\`tsx
const computedValue = useMemo(() => expensiveCalculation(data), [data]);
\`\`\`

#### 3. Lazy Loading (Tembel YÃ¼kleme)

**Lazy loading**, yalnÄ±zca ihtiyaÃ§ duyulan bileÅŸenlerin yÃ¼klenmesini saÄŸlar. Bu sayede baÅŸlangÄ±Ã§taki yÃ¼kleme sÃ¼resi hÄ±zlanÄ±r.

\`\`\`tsx
const LazyComponent = React.lazy(() => import('./HeavyComponent'))
\`\`\`

Lazy loading sayesinde uygulama baÅŸlangÄ±cÄ±nda yalnÄ±zca gerekli bileÅŸenler yÃ¼klenir. DiÄŸer bileÅŸenler kullanÄ±cÄ±nÄ±n etkileÅŸimi ile yÃ¼klenir.

#### 4. Virtualization (SanallaÅŸtÄ±rma)

Veri listeleme gibi bÃ¼yÃ¼k veri setlerini gÃ¶stermek iÃ§in **virtualization** kullanarak yalnÄ±zca gÃ¶rÃ¼nÃ¼r Ã¶ÄŸeleri render edebiliriz. Bu, bellek ve render sÃ¼relerini optimize eder.

\`\`\`tsx
import { List } from 'react-window';

const MyList = () => (
  <List
    height={400}
    itemCount={1000}
    itemSize={35}
    width={300}
  >
    {({ index, style }) => <div style={style}>{}</div>}
  </List>
);
\`\`\`

---

### ğŸ“Š Performans AraÃ§larÄ±

Performans iyileÅŸtirmeleri yaparken kullanabileceÄŸiniz bazÄ± araÃ§lar:

- **React DevTools Profiler**: UygulamanÄ±zÄ±n render sÃ¼reÃ§lerini analiz eder ve hangi bileÅŸenlerin en fazla kaynak tÃ¼kettiÄŸini gÃ¶sterir.
- **Lighthouse**: Google'Ä±n geliÅŸtirdiÄŸi aÃ§Ä±k kaynaklÄ± bir araÃ§tÄ±r. Web uygulamalarÄ±nÄ±n performansÄ±nÄ± ve SEO uyumluluÄŸunu test eder.
- **Web Vitals**: Web Vitals, kullanÄ±cÄ± deneyimini Ã¶lÃ§en Ã¶nemli metrikleri takip etmenizi saÄŸlar. Bu verilerle site performansÄ±nÄ±zÄ± optimize edebilirsiniz.

---

### ğŸ›  Performans Test Etme

Performans iyileÅŸtirmelerini yapmadan Ã¶nce, mevcut uygulamanÄ±zÄ±n performansÄ±nÄ± test etmek oldukÃ§a Ã¶nemlidir. **Lighthouse** veya **Web Vitals** gibi araÃ§larla uygulamanÄ±zÄ±n performansÄ±nÄ± test edebilir, ardÄ±ndan optimizasyonlarÄ± gerÃ§ekleÅŸtirebilirsiniz.

---

### âœ… SonuÃ§

Performans iyileÅŸtirmeleri sadece kullanÄ±cÄ± deneyimini geliÅŸtirmekle kalmaz, aynÄ± zamanda SEO sÄ±ralamalarÄ±nÄ± ve uygulamanÄ±zÄ±n eriÅŸilebilirliÄŸini de artÄ±rÄ±r. KÃ¼Ã§Ã¼k adÄ±mlar bÃ¼yÃ¼k farklar yaratabilir!

Daha fazla performans Ã¶nerisi ve teknik bilgi iÃ§in [React Documentation](https://reactjs.org/docs/optimizing-performance.html) ve [Web Vitals](https://web.dev/vitals/) kaynaklarÄ±na gÃ¶z atabilirsiniz.

---

### ğŸ“š Kaynaklar

- [React Memoization](https://reactjs.org/docs/react-api.html#reactmemo)
- [React Performance Optimization](https://reactjs.org/docs/optimizing-performance.html)
- [Lighthouse](https://developers.google.com/web/tools/lighthouse)
- [Web Vitals](https://web.dev/vitals/)
    `
  },
  {
    id:2,
    slug: 'react-state-management',
    title: 'React ile State YÃ¶netimi',
    author: 'Burhan SaÄŸlÄ±k',
    date: '20 Nisan 2025',
    coverImage: '../images/state-management.jpg',
    content: `
### ğŸš€ GiriÅŸ

React uygulamalarÄ±nda **state yÃ¶netimi** Ã¶nemli bir konudur. Bu yazÄ±da, React'ta state yÃ¶netimini doÄŸru bir ÅŸekilde nasÄ±l uygulayabileceÄŸinizi keÅŸfedeceÄŸiz.

---

### ğŸ“Œ State YÃ¶netim Teknikleri

#### 1. useState

React'ta en temel state yÃ¶netimi hook'u olan **useState**, bileÅŸenler arasÄ±ndaki veriyi yÃ¶netmek iÃ§in kullanÄ±lÄ±r.

\`\`\`tsx
const [count, setCount] = useState(0);
\`\`\`

#### 2. useReducer

useReducer, daha karmaÅŸÄ±k state yÃ¶netimi iÃ§in kullanÄ±lÄ±r. Bu hook, daha bÃ¼yÃ¼k uygulamalarda faydalÄ±dÄ±r ve redux gibi dÄ±ÅŸ kÃ¼tÃ¼phanelere benzer.

\`\`\`tsx
const [state, dispatch] = useReducer(reducer, initialState);
\`\`\`

#### 3. Redux ve Context API

BÃ¼yÃ¼k uygulamalar iÃ§in global state yÃ¶netimi gereklidir. Redux ve Context API, farklÄ± state yÃ¶netimi yÃ¶ntemleridir. Redux, daha fazla yapÄ±landÄ±rma gerektirirken, Context API daha basit bir Ã§Ã¶zÃ¼m sunar.

---

### âœ… SonuÃ§

State yÃ¶netimini doÄŸru kullanmak, uygulamanÄ±zÄ±n performansÄ±nÄ± ve bakÄ±mÄ±nÄ± kolaylaÅŸtÄ±rÄ±r. UygulamanÄ±zÄ±n bÃ¼yÃ¼klÃ¼ÄŸÃ¼ne gÃ¶re uygun Ã§Ã¶zÃ¼mÃ¼ seÃ§mek Ã¶nemlidir.

---
    `
  },
]
